WITH APPROVE_AMOUNT AS (
   SELECT 
                  POR.IDS,
                  POR.BANK_ID,
                  AST.REG_NAME || ' - ' || ASM.REG_CODE AS BANK,
                  SUM(APP_BALANCE) APP_BAL
     FROM 
                    AB_PO_DEMAND_REQ_DET POR
        JOIN AB_SETUP_REGISTRATION ASM ON ASM.SR_ID = POR.BANK_ID
        JOIN AB_SETUP_REGISTRATION AST 
          ON AST.SR_ID = ASM.SR_IDS AND AST.REG_TYPE = 'BANK'
    WHERE 
                    ASM.REG_TYPE = 'BANK LOV'
          AND POR.ORG_ID = :GV_ORG_ID
          AND POR.DET_STATUS IS NOT NULL
          AND POR.STATUS = 'Y'
          AND POR.DET_STATUS = 'ALLOCATED'
          AND POR.APP_BALANCE > 0
    GROUP BY 
                     POR.IDS, 
                     POR.BANK_ID,
                     AST.REG_NAME,
                     ASM.REG_CODE
)
,TRANSCATION_DATA AS(
SELECT 
                BT.COMPANY_BANK_ID,
                BT.TRANSACTION_DATE,
                    SUM(TO_NUMBER(REGEXP_REPLACE(BTD.AMOUNT, '[^0-9.]', ''))) AS BANK_AMOUNT

    FROM 
                     AB_BANK_TRANSACTION BTD 
          JOIN  AB_BANK_TRANSACTION BT ON  BT.BANK_ID=BTD.IDS
    WHERE
                     BTD.TRANS_TYPE= 'TRANSACTION DET'
           AND  BTD.ORG_ID = :GV_ORG_ID
           AND  BTD.STATUS = 'Y' 
     GROUP BY
                BT.COMPANY_BANK_ID,
                BT.TRANSACTION_DATE
)
SELECT
        APM.BANK_ID,
       DRD.DET_ID,
       DRD.ITEM_ID,
       APM.BANK_ID,
       ITM.ITEM_NAME AS PRODUCT,
       LD.LOOKUP_DET_NAME AS NATURE_OF_FUND,
       USR.UM_NAME AS DEPARTMENT,
       APM.BANK,
       DRD.REMARKS,
       DRD.PARTY_ID,
       CASE
            WHEN ASR.REG_TYPE IN ('AGENCY', 'CUSTOMER REGISTRATION') THEN ASR.REG_NAME
            ELSE ASR.PARTY_NAME
       END AS PARTY_NAME,
       DRD.BUYING_DATE,
       DRD.DUE_DATE,
       TO_CHAR(NVL(DRD.PROFIT_AMOUNT, 0) + NVL(DRD.BALANCE, 0), '999G999G999G999G990D00') AS REQUISTION_AMOUNT,
       TO_CHAR(NVL(APM.APP_BAL, 0), '999G999G999G999G990D00') AS APPROVE_AMOUNT,
       CASE 
            WHEN NVL(DRD.PROFIT_AMOUNT, 0) + NVL(DRD.BALANCE, 0) - NVL(APM.APP_BAL, 0) > 0 THEN 
                TO_CHAR(NVL(DRD.PROFIT_AMOUNT, 0) + NVL(DRD.BALANCE, 0) - NVL(APM.APP_BAL, 0), '999G999G999G999G990D00')
            ELSE 
                TO_CHAR(NVL(DRD.PROFIT_AMOUNT, 0) + NVL(DRD.BALANCE, 0) - NVL(APM.APP_BAL, 0), '999G999G999G999G990D00')
       END AS BALANCE_AMOUNT,
       CASE 
            WHEN APM.APP_BAL IS NULL THEN 'Created'
            WHEN DRD.BALANCE > NVL(APM.APP_BAL, 0) THEN 'Partial Allocated'
            WHEN DRD.BALANCE = APM.APP_BAL THEN 'Allocated'
            ELSE NULL
       END AS DEMAND_STATUS,           
       INITCAP(DRD.CREATED_BY || ' (' || TO_CHAR(DRD.CREATED_ON, 'DD-MON-YYYY') || ')') AS CREATED_BY,
       'APPROVE' AS APPROVE,
       CASE WHEN  TD.TRANSACTION_DATE <= DRD.DUE_DATE THEN TD.BANK_AMOUNT - NVL(APM.APP_BAL,0) ELSE NULL END BALANCE
 FROM 
                                AB_PO_DEMAND_REQ_DET DRD
            LEFT JOIN   AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = DRD.PARTY_ID
            LEFT JOIN   AB_ITEMS_MASTER ITM ON ITM.ITEM_ID = DRD.ITEM_ID
            LEFT JOIN   APPROVE_AMOUNT APM ON APM.IDS = DRD.DET_ID
            LEFT JOIN   AB_LOOKUP_DETAIL LD ON LD.DET_ID = DRD.LOOKUP_ID 
                     AND   LD.STATUS = 'Y' 
                     AND   LD.LOOKUP_ID = '030'
            LEFT JOIN   AB_UM_SETUP_REGISTRATION USR ON USR.UM_ID = DRD.DEPARTMENT_ID 
                     AND  USR.STATUS = 'Y'
         LEFT JOIN  TRANSCATION_DATA TD ON TD.COMPANY_BANK_ID=APM.BANK_ID
WHERE 
           DRD.ORG_ID = :GV_ORG_ID
  AND DRD.DET_STATUS IS NOT NULL
  AND DET_STATUS = 'CREATED'
  AND  DRD.BALANCE = APM.APP_BAL
 -- AND TRUNC(DRD.CREATED_ON) BETWEEN NVL(TO_DATE(:P328_FROM_DATE, 'DD-MON-YYYY'), TRUNC(DRD.CREATED_ON))  
                  --            AND NVL(TO_DATE(:P328_TO_DATE, 'DD-MON-YYYY'), TRUNC(DRD.CREATED_ON))
ORDER BY DRD.CREATED_ON DESC;

==================================================================================================================================================
-- WITH APPROVE_AMOUNT AS (
--    SELECT 
--                   POR.IDS,
--                   POR.BANK_ID,
--                   AST.REG_NAME || ' - ' || ASM.REG_CODE AS BANK,
--                   SUM(APP_BALANCE) APP_BAL
--      FROM 
--                     AB_PO_DEMAND_REQ_DET POR
--         JOIN AB_SETUP_REGISTRATION ASM ON ASM.SR_ID = POR.BANK_ID
--         JOIN AB_SETUP_REGISTRATION AST 
--           ON AST.SR_ID = ASM.SR_IDS AND AST.REG_TYPE = 'BANK'
--     WHERE
--                     ASM.REG_TYPE = 'BANK LOV'
--           AND POR.ORG_ID = :GV_ORG_ID
--           AND POR.DET_STATUS IS NOT NULL
--           AND POR.STATUS = 'Y'
--           AND POR.DET_STATUS = 'ALLOCATED'
--           AND POR.APP_BALANCE > 0
--     GROUP BY 
--                      POR.IDS, 
--                      POR.BANK_ID,
--                      AST.REG_NAME,
--                      ASM.REG_CODE,
--                       ASM.BALANCE_AMOUNT
-- )
-- ,TRANSCATION_DATA AS(
-- SELECT 
--     BTD.BANK_ID,
--     BT.COMPANY_BANK_ID,
--     AST.REG_NAME AS REG_NAME,
--     BT.TRANSACTION_DATE,
--     ASM.BALANCE_AMOUNT,
--     SUM(TO_NUMBER(REGEXP_REPLACE(BTD.AMOUNT, '[^0-9.]', ''))) AS BANK_AMOUNT
-- FROM 
--     AB_BANK_TRANSACTION BTD
-- JOIN   AB_BANK_TRANSACTION BT  ON BT.BANK_ID = BTD.IDS
-- LEFT JOIN  AB_SETUP_REGISTRATION ASM  ON ASM.SR_ID = BT.COMPANY_BANK_ID 
-- LEFT JOIN  AB_SETUP_REGISTRATION AST  ON AST.SR_ID = ASM.SR_IDS  AND AST.REG_TYPE = 'BANK'
-- WHERE 
--     ASM.REG_TYPE = 'BANK LOV'
--     AND ASM.ORG_ID = :GV_ORG_ID
--     AND BTD.TRANS_TYPE = 'TRANSACTION DET'
--     AND BTD.ORG_ID = :GV_ORG_ID
--     AND BTD.STATUS = 'Y'
-- GROUP BY 
--     BT.COMPANY_BANK_ID,
--     BT.TRANSACTION_DATE,
--     BTD.BANK_NAME,
--     BTD.BANK_ID,
--     AST.REG_NAME,ASM.BALANCE_AMOUNT
-- )
-- SELECT   
--         DRD.DET_ID,
--         TD.BANK_ID RECOVERY_BANK_ID,
--         TD.COMPANY_BANK_ID,
--         TD.REG_NAME AS RECOVERY_BANK_NAME,
--         APM.BANK_ID,
--         APM.BANK AS PAYMENT_BANK_NAME,
--         TD.BALANCE_AMOUNT AS OPENING_BALANCE,
--        DRD.ITEM_ID,
--        ITM.ITEM_NAME AS PRODUCT,
--        LD.LOOKUP_DET_NAME AS NATURE_OF_FUND,
--        USR.UM_NAME AS DEPARTMENT,
--        DRD.REMARKS,
--        DRD.PARTY_ID,
--       TD.TRANSACTION_DATE,
--        CASE
--             WHEN ASR.REG_TYPE IN ('AGENCY', 'CUSTOMER REGISTRATION') THEN ASR.REG_NAME
--             ELSE ASR.PARTY_NAME
--        END AS PARTY_NAME,
--        DRD.BUYING_DATE,
--        DRD.DUE_DATE,
--        TO_CHAR(NVL(DRD.PROFIT_AMOUNT, 0) + NVL(DRD.BALANCE, 0), '999G999G999G999G990D00') AS REQUISTION_AMOUNT,
--        TD.BANK_AMOUNT,
--        NVL(APM.APP_BAL,0) AS APPROVE_AMOUNT,
  

--        NVL(TD.BANK_AMOUNT,0) - NVL(APM.APP_BAL, 0) AS BALANCE_AMOUNT,
              
--        INITCAP(DRD.CREATED_BY || ' (' || TO_CHAR(DRD.CREATED_ON, 'DD-MON-YYYY') || ')') AS CREATED_BY
--       --CASE WHEN  TD.TRANSACTION_DATE <= DRD.DUE_DATE THEN TD.BANK_AMOUNT - NVL(APM.APP_BAL,0) ELSE NULL END BALANCE
--  FROM 
--                                 AB_PO_DEMAND_REQ_DET DRD
--             LEFT JOIN   AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = DRD.PARTY_ID
--             LEFT JOIN   AB_ITEMS_MASTER ITM ON ITM.ITEM_ID = DRD.ITEM_ID
--             LEFT JOIN   APPROVE_AMOUNT APM ON APM.IDS = DRD.DET_ID
--             LEFT JOIN   AB_LOOKUP_DETAIL LD ON LD.DET_ID = DRD.LOOKUP_ID 
--                      AND   LD.STATUS = 'Y' 
--                      AND   LD.LOOKUP_ID = '030'
--             LEFT JOIN   AB_UM_SETUP_REGISTRATION USR ON USR.UM_ID = DRD.DEPARTMENT_ID 
--                      AND  USR.STATUS = 'Y'
--       -- LEFT JOIN  TRANSCATION_DATA TD ON TD.COMPANY_BANK_ID=APM.BANK_ID
--       LEFT JOIN  TRANSCATION_DATA TD ON TD.COMPANY_BANK_ID=APM.BANK_ID
-- WHERE 
--            DRD.ORG_ID = :GV_ORG_ID
--   AND DRD.DET_STATUS IS NOT NULL
--   AND DET_STATUS = 'CREATED'
--   AND  DRD.BALANCE = APM.APP_BAL
--  -- AND TRUNC(DRD.CREATED_ON) BETWEEN NVL(TO_DATE(:P328_FROM_DATE, 'DD-MON-YYYY'), TRUNC(DRD.CREATED_ON))  
--                   --            AND NVL(TO_DATE(:P328_TO_DATE, 'DD-MON-YYYY'), TRUNC(DRD.CREATED_ON))
-- ORDER BY DRD.CREATED_ON DESC
